// This file is auto-generated by @hey-api/openapi-ts

export const AppModelSchema = {
    properties: {
        version: {
            type: 'string',
            title: 'Version',
            default: '0.1.0'
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        debug: {
            type: 'boolean',
            title: 'Debug',
            default: true
        },
        log: {
            type: 'boolean',
            title: 'Log',
            default: true
        },
        utilisateur: {
            '$ref': '#/components/schemas/UtilisateurModel',
            default: {
                username: '',
                email: '',
                domain: '',
                password: '',
                oauth_enabled: false,
                oauth_client: '',
                oauth_secret: '',
                oauth_mail: '',
                zurg_enabled: false,
                zurg_token: ''
            }
        },
        cloudflare: {
            '$ref': '#/components/schemas/CloudflareModel',
            default: {
                cloudflare_login: '',
                cloudflare_api_key: ''
            }
        },
        dossiers: {
            '$ref': '#/components/schemas/DossierModel',
            default: {
                on_item_type: [],
                authentification: {},
                domaine: {}
            }
        },
        media: {
            '$ref': '#/components/schemas/MediaModel',
            default: {
                on_item_type: []
            }
        },
        applications: {
            items: {
                '$ref': '#/components/schemas/ApplicationModel'
            },
            type: 'array',
            title: 'Applications',
            default: []
        }
    },
    type: 'object',
    title: 'AppModel'
} as const;

export const ApplicationModelSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id',
            default: 1
        },
        label: {
            type: 'string',
            title: 'Label',
            default: ''
        }
    },
    type: 'object',
    title: 'ApplicationModel'
} as const;

export const CloudflareModelSchema = {
    properties: {
        cloudflare_login: {
            type: 'string',
            title: 'Cloudflare Login',
            default: ''
        },
        cloudflare_api_key: {
            type: 'string',
            title: 'Cloudflare Api Key',
            default: ''
        }
    },
    type: 'object',
    title: 'CloudflareModel'
} as const;

export const DossierModelSchema = {
    properties: {
        on_item_type: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'On Item Type',
            default: []
        },
        authentification: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Authentification'
        },
        domaine: {
            additionalProperties: true,
            type: 'object',
            title: 'Domaine'
        }
    },
    type: 'object',
    title: 'DossierModel'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MediaModelSchema = {
    properties: {
        on_item_type: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'On Item Type',
            default: []
        }
    },
    type: 'object',
    title: 'MediaModel'
} as const;

export const MessageResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'MessageResponse'
} as const;

export const RDUserSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        points: {
            type: 'integer',
            title: 'Points',
            description: "User's RD points"
        },
        locale: {
            type: 'string',
            title: 'Locale'
        },
        avatar: {
            type: 'string',
            title: 'Avatar',
            description: "URL to the user's avatar"
        },
        type: {
            type: 'string',
            enum: ['free', 'premium'],
            title: 'Type'
        },
        premium: {
            type: 'integer',
            title: 'Premium',
            description: 'Premium subscription left in seconds'
        }
    },
    type: 'object',
    required: ['id', 'username', 'email', 'points', 'locale', 'avatar', 'type', 'premium'],
    title: 'RDUser'
} as const;

export const RootResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        version: {
            type: 'string',
            title: 'Version'
        }
    },
    type: 'object',
    required: ['message', 'version'],
    title: 'RootResponse'
} as const;

export const SetSettingsSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        value: {
            title: 'Value'
        }
    },
    type: 'object',
    required: ['key', 'value'],
    title: 'SetSettings'
} as const;

export const TraktOAuthInitiateResponseSchema = {
    properties: {
        auth_url: {
            type: 'string',
            title: 'Auth Url'
        }
    },
    type: 'object',
    required: ['auth_url'],
    title: 'TraktOAuthInitiateResponse'
} as const;

export const UploadLogsResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        url: {
            type: 'string',
            maxLength: 2083,
            minLength: 1,
            format: 'uri',
            title: 'Url',
            description: 'URL to the uploaded log file. 50M Filesize limit. 180 day retention.'
        }
    },
    type: 'object',
    required: ['success', 'url'],
    title: 'UploadLogsResponse'
} as const;

export const UtilisateurModelSchema = {
    properties: {
        username: {
            type: 'string',
            title: 'Username',
            default: ''
        },
        email: {
            type: 'string',
            title: 'Email',
            default: ''
        },
        domain: {
            type: 'string',
            title: 'Domain',
            default: ''
        },
        password: {
            type: 'string',
            title: 'Password',
            default: ''
        },
        oauth_enabled: {
            type: 'boolean',
            title: 'Oauth Enabled',
            default: false
        },
        oauth_client: {
            type: 'string',
            title: 'Oauth Client',
            default: ''
        },
        oauth_secret: {
            type: 'string',
            title: 'Oauth Secret',
            default: ''
        },
        oauth_mail: {
            type: 'string',
            title: 'Oauth Mail',
            default: ''
        },
        zurg_enabled: {
            type: 'boolean',
            title: 'Zurg Enabled',
            default: false
        },
        zurg_token: {
            type: 'string',
            title: 'Zurg Token',
            default: ''
        }
    },
    type: 'object',
    title: 'UtilisateurModel'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;