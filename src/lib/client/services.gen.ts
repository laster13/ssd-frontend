// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { RootError, RootResponse2, HealthError, HealthResponse, RdError, RdResponse, GenerateapikeyError, GenerateapikeyResponse, TorboxError, TorboxResponse, ServicesError, ServicesResponse, TraktOauthInitiateError, TraktOauthInitiateResponse, TraktOauthCallbackData, TraktOauthCallbackError, TraktOauthCallbackResponse, LogsError, LogsResponse, MountError, MountResponse, UploadLogsError, UploadLogsResponse2, CheckFileApiV1ScriptsCheckFileGetError, CheckFileApiV1ScriptsCheckFileGetResponse, RunScriptApiV1ScriptsRunScriptNameGetData, RunScriptApiV1ScriptsRunScriptNameGetError, RunScriptApiV1ScriptsRunScriptNameGetResponse, UpdateConfigApiV1ScriptsUpdateConfigPostError, UpdateConfigApiV1ScriptsUpdateConfigPostResponse, GetSettingsSchemaError, GetSettingsSchemaResponse, LoadSettingsError, LoadSettingsResponse, SaveSettingsError, SaveSettingsResponse, GetAllSettingsError, GetAllSettingsResponse, GetSettingsData, GetSettingsError, GetSettingsResponse, SetAllSettingsData, SetAllSettingsError, SetAllSettingsResponse, SetSettingsData, SetSettingsError, SetSettingsResponse } from './types.gen';

export const client = createClient(createConfig());

export class DefaultService {
    /**
     * Root
     */
    public static root<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<RootResponse2, RootError, ThrowOnError>({
            ...options,
            url: '/api/v1/'
        });
    }
    
    /**
     * Health
     */
    public static health<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<HealthResponse, HealthError, ThrowOnError>({
            ...options,
            url: '/api/v1/health'
        });
    }
    
    /**
     * Get Rd User
     */
    public static rd<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<RdResponse, RdError, ThrowOnError>({
            ...options,
            url: '/api/v1/rd'
        });
    }
    
    /**
     * Generate Apikey
     */
    public static generateapikey<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<GenerateapikeyResponse, GenerateapikeyError, ThrowOnError>({
            ...options,
            url: '/api/v1/generateapikey'
        });
    }
    
    /**
     * Get Torbox User
     */
    public static torbox<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<TorboxResponse, TorboxError, ThrowOnError>({
            ...options,
            url: '/api/v1/torbox'
        });
    }
    
    /**
     * Get Services
     */
    public static services<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<ServicesResponse, ServicesError, ThrowOnError>({
            ...options,
            url: '/api/v1/services'
        });
    }
    
    /**
     * Initiate Trakt Oauth
     */
    public static traktOauthInitiate<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<TraktOauthInitiateResponse, TraktOauthInitiateError, ThrowOnError>({
            ...options,
            url: '/api/v1/trakt/oauth/initiate'
        });
    }
    
    /**
     * Trakt Oauth Callback
     */
    public static traktOauthCallback<ThrowOnError extends boolean = false>(options: Options<TraktOauthCallbackData, ThrowOnError>) {
        return (options?.client ?? client).get<TraktOauthCallbackResponse, TraktOauthCallbackError, ThrowOnError>({
            ...options,
            url: '/api/v1/trakt/oauth/callback'
        });
    }
    
    /**
     * Get Logs
     */
    public static logs<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<LogsResponse, LogsError, ThrowOnError>({
            ...options,
            url: '/api/v1/logs'
        });
    }
    
    /**
     * Get Rclone Files
     * Get all files in the rclone mount.
     */
    public static mount<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<MountResponse, MountError, ThrowOnError>({
            ...options,
            url: '/api/v1/mount'
        });
    }
    
    /**
     * Upload Logs
     * Upload the latest log file to paste.c-net.org
     */
    public static uploadLogs<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<UploadLogsResponse2, UploadLogsError, ThrowOnError>({
            ...options,
            url: '/api/v1/upload_logs'
        });
    }
    
}

export class ScriptsService {
    /**
     * Check File
     */
    public static checkFileApiV1ScriptsCheckFileGet<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<CheckFileApiV1ScriptsCheckFileGetResponse, CheckFileApiV1ScriptsCheckFileGetError, ThrowOnError>({
            ...options,
            url: '/api/v1/scripts/check-file'
        });
    }
    
    /**
     * Run Script
     */
    public static runScriptApiV1ScriptsRunScriptNameGet<ThrowOnError extends boolean = false>(options: Options<RunScriptApiV1ScriptsRunScriptNameGetData, ThrowOnError>) {
        return (options?.client ?? client).get<RunScriptApiV1ScriptsRunScriptNameGetResponse, RunScriptApiV1ScriptsRunScriptNameGetError, ThrowOnError>({
            ...options,
            url: '/api/v1/scripts/run/{script_name}'
        });
    }
    
    /**
     * Update Config
     */
    public static updateConfigApiV1ScriptsUpdateConfigPost<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<UpdateConfigApiV1ScriptsUpdateConfigPostResponse, UpdateConfigApiV1ScriptsUpdateConfigPostError, ThrowOnError>({
            ...options,
            url: '/api/v1/scripts/update-config'
        });
    }
    
}

export class SettingsService {
    /**
     * Get Settings Schema
     * Get the JSON schema for the settings.
     */
    public static getSettingsSchema<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetSettingsSchemaResponse, GetSettingsSchemaError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/schema'
        });
    }
    
    /**
     * Load Settings
     */
    public static loadSettings<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<LoadSettingsResponse, LoadSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/load'
        });
    }
    
    /**
     * Save Settings
     */
    public static saveSettings<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<SaveSettingsResponse, SaveSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/save'
        });
    }
    
    /**
     * Get All Settings
     */
    public static getAllSettings<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllSettingsResponse, GetAllSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/get/all'
        });
    }
    
    /**
     * Get Settings
     */
    public static getSettings<ThrowOnError extends boolean = false>(options: Options<GetSettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSettingsResponse, GetSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/get/{paths}'
        });
    }
    
    /**
     * Set All Settings
     */
    public static setAllSettings<ThrowOnError extends boolean = false>(options: Options<SetAllSettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<SetAllSettingsResponse, SetAllSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/set/all'
        });
    }
    
    /**
     * Set Settings
     */
    public static setSettings<ThrowOnError extends boolean = false>(options: Options<SetSettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<SetSettingsResponse, SetSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/set'
        });
    }
    
}