// This file is auto-generated by @hey-api/openapi-ts

export type AppModel = {
    version?: string;
    api_key?: string;
    debug?: boolean;
    log?: boolean;
    utilisateur?: UtilisateurModel;
    cloudflare?: CloudflareModel;
    dossiers?: DossierModel;
    media?: MediaModel;
    applications?: Array<ApplicationModel>;
};

export type ApplicationModel = {
    id?: number;
    label?: string;
};

export type CloudflareModel = {
    cloudflare_login?: string;
    cloudflare_api_key?: string;
};

export type DossierModel = {
    on_item_type?: Array<(string)>;
    authentification?: {
        [key: string]: (string);
    };
    domaine?: {
        [key: string]: unknown;
    };
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type MediaModel = {
    on_item_type?: Array<(string)>;
};

export type MessageResponse = {
    message: string;
};

export type RDUser = {
    id: number;
    username: string;
    email: string;
    /**
     * User's RD points
     */
    points: number;
    locale: string;
    /**
     * URL to the user's avatar
     */
    avatar: string;
    type: 'free' | 'premium';
    /**
     * Premium subscription left in seconds
     */
    premium: number;
};

export type type = 'free' | 'premium';

export type RootResponse = {
    message: string;
    version: string;
};

export type SetSettings = {
    key: string;
    value: unknown;
};

export type TraktOAuthInitiateResponse = {
    auth_url: string;
};

export type UploadLogsResponse = {
    success: boolean;
    /**
     * URL to the uploaded log file. 50M Filesize limit. 180 day retention.
     */
    url: string;
};

export type UtilisateurModel = {
    username?: string;
    email?: string;
    domain?: string;
    password?: string;
    oauth_enabled?: boolean;
    oauth_client?: string;
    oauth_secret?: string;
    oauth_mail?: string;
    zurg_enabled?: boolean;
    zurg_token?: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type RootResponse2 = (RootResponse);

export type RootError = unknown;

export type HealthResponse = (MessageResponse);

export type HealthError = (unknown);

export type RdResponse = (RDUser);

export type RdError = (unknown);

export type GenerateapikeyResponse = (MessageResponse);

export type GenerateapikeyError = (unknown);

export type TorboxResponse = (unknown);

export type TorboxError = (unknown);

export type ServicesResponse = ({
    [key: string]: (boolean);
});

export type ServicesError = (unknown);

export type TraktOauthInitiateResponse = (TraktOAuthInitiateResponse);

export type TraktOauthInitiateError = (unknown);

export type TraktOauthCallbackData = {
    query: {
        code: string;
    };
};

export type TraktOauthCallbackResponse = (MessageResponse);

export type TraktOauthCallbackError = (unknown | HTTPValidationError);

export type LogsResponse = (string);

export type LogsError = (unknown);

export type MountResponse = ({
    [key: string]: (string);
});

export type MountError = (unknown);

export type UploadLogsResponse2 = (UploadLogsResponse);

export type UploadLogsError = (unknown);

export type CheckFileApiV1ScriptsCheckFileGetResponse = (unknown);

export type CheckFileApiV1ScriptsCheckFileGetError = (unknown);

export type RunScriptApiV1ScriptsRunScriptNameGetData = {
    path: {
        script_name: string;
    };
    query?: {
        /**
         * Label du conteneur
         */
        label?: string;
    };
};

export type RunScriptApiV1ScriptsRunScriptNameGetResponse = (unknown);

export type RunScriptApiV1ScriptsRunScriptNameGetError = (unknown | HTTPValidationError);

export type UpdateConfigApiV1ScriptsUpdateConfigPostResponse = (unknown);

export type UpdateConfigApiV1ScriptsUpdateConfigPostError = (unknown);

export type GetSettingsSchemaResponse = ({
    [key: string]: unknown;
});

export type GetSettingsSchemaError = (unknown);

export type LoadSettingsResponse = (MessageResponse);

export type LoadSettingsError = (unknown);

export type SaveSettingsResponse = (MessageResponse);

export type SaveSettingsError = (unknown);

export type GetAllSettingsResponse = (AppModel);

export type GetAllSettingsError = (unknown);

export type GetSettingsData = {
    path: {
        paths: string;
    };
};

export type GetSettingsResponse = ({
    [key: string]: unknown;
});

export type GetSettingsError = (unknown | HTTPValidationError);

export type SetAllSettingsData = {
    body: {
        [key: string]: unknown;
    };
};

export type SetAllSettingsResponse = (MessageResponse);

export type SetAllSettingsError = (unknown | HTTPValidationError);

export type SetSettingsData = {
    body: Array<SetSettings>;
};

export type SetSettingsResponse = (MessageResponse);

export type SetSettingsError = (unknown | HTTPValidationError);